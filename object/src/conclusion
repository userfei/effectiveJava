
1、使用静态工厂方法取代构造器来获取类的实例
    - 静态方法有名称, 可以表示该实例的功能
    - 不必要每次调用实例时, 都创建对象
    - 静态工厂方法可以返回原返回类型的任何子类型的对象

    - 对象实例化的静态方法与其他静态方法一样, 区分实例化对象的静态方法有一定困难
    - 通过静态工厂方法实例化的类, 如果没有公有或者受保护的构造器, 则不允许子类化（子类继承该类）, 可以使用组合方式

2、遇到多个构造器参数的对象, 考虑用构建器 Builder
    - 静态工厂方法和构造器的方式无法扩展大量可选的构造器参数
    - JavaBean 模式大量的get/set 方法, 在构造的过程中可能处于不一致的状态
    - Builder 模式适用于有大量构造参数且这些是可选的时候

3、通过私有构造器或者枚举强化 singleton 属性

4、避免创建不必要的对象, 比如 String s = new String("123")--每次调用都会创建,可以改成 String s = "123";

5、消除过期对象的引用, 比如数据出栈后, 将出栈的数据引用置为 null;

6、内存泄漏主要可能引起的原因
    - 内是自己管理的, 需要注意内存泄漏问题
    - 缓存
    - 监听器和其他回调

7、避免使用终结方法 - finalize; 其执行的时间是不可测的;